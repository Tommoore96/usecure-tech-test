/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const AssessmentCompleteLazyImport = createFileRoute('/assessment-complete')()
const SlidesSlideIndexLazyImport = createFileRoute('/slides/$slideIndex')()

// Create/Update Routes

const AssessmentCompleteLazyRoute = AssessmentCompleteLazyImport.update({
  id: '/assessment-complete',
  path: '/assessment-complete',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/assessment-complete.lazy').then((d) => d.Route),
)

const SlidesSlideIndexLazyRoute = SlidesSlideIndexLazyImport.update({
  id: '/slides/$slideIndex',
  path: '/slides/$slideIndex',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/slides.$slideIndex.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/assessment-complete': {
      id: '/assessment-complete'
      path: '/assessment-complete'
      fullPath: '/assessment-complete'
      preLoaderRoute: typeof AssessmentCompleteLazyImport
      parentRoute: typeof rootRoute
    }
    '/slides/$slideIndex': {
      id: '/slides/$slideIndex'
      path: '/slides/$slideIndex'
      fullPath: '/slides/$slideIndex'
      preLoaderRoute: typeof SlidesSlideIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/assessment-complete': typeof AssessmentCompleteLazyRoute
  '/slides/$slideIndex': typeof SlidesSlideIndexLazyRoute
}

export interface FileRoutesByTo {
  '/assessment-complete': typeof AssessmentCompleteLazyRoute
  '/slides/$slideIndex': typeof SlidesSlideIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/assessment-complete': typeof AssessmentCompleteLazyRoute
  '/slides/$slideIndex': typeof SlidesSlideIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/assessment-complete' | '/slides/$slideIndex'
  fileRoutesByTo: FileRoutesByTo
  to: '/assessment-complete' | '/slides/$slideIndex'
  id: '__root__' | '/assessment-complete' | '/slides/$slideIndex'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AssessmentCompleteLazyRoute: typeof AssessmentCompleteLazyRoute
  SlidesSlideIndexLazyRoute: typeof SlidesSlideIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  AssessmentCompleteLazyRoute: AssessmentCompleteLazyRoute,
  SlidesSlideIndexLazyRoute: SlidesSlideIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/assessment-complete",
        "/slides/$slideIndex"
      ]
    },
    "/assessment-complete": {
      "filePath": "assessment-complete.lazy.tsx"
    },
    "/slides/$slideIndex": {
      "filePath": "slides.$slideIndex.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
